unit routes;
{:< - A Unit **@name** implementa a classe TMyHandler filha de THTTPRoute.

  - DESCRIÇÃO
    - A Unit **@name** implementa a classe TMyHandler filha de THTTPRoute para
      demonstrar o uso de objetos sendo executado pelo browser.

    - A Unit **@name** demonstra como criar rotiamento usando o
      método **HTTPRouter.RegisterRoute**

  - **REFERÊNCIAS**
      -

  - **CÓDIGO FONTE**:
    - @html(<a href="../units/routes.pas">routes.pas</a>)

  - **HISTÓRICO**
    - Documento criado por: paulosspacheco@@yahoo.com.br
      - **23/03/2023** : Inicio da documentação deste código
}

{$mode objfpc}{$H+}

interface

uses
 sysutils,
 classes,
 httpdefs,
 httproute;

Var
  BaseURL : String;

Procedure RegisterRoutes;

Type
  {: A class @name publica o objeto **TMyHandler**

     - DESCRIÇÃO:
       - A classe @name implemnta o método *TRouteObject.HandleRequest()** para
         executar a procedure RequestToResponse('Route object',ARequest,AResponse).

     - REFERÊNCIAS
       [fpWeb Tutorial](https://wiki.lazarus.freepascal.org/fpWeb_Tutorial);
  }
  TMyHandler = Class(TRouteObject)

    {: O método @name é um método abstrato que obrigatóriomente precisa
       ser anulado para que se possa executar o que se deseja.

       - DESCRIÇÃO:
         - Neste exemplo é executado a procedure RequestToResponse('Route object',ARequest,AResponse);

       - PARÂMETROS
         - **ARequest**
           - Contém informações vinda do Browser;

         - **aResponse**
           - Contém informações enviadas para o Browser;

        - EXEMPLO DE USO:
          - Registro do objeto TMyHandler:
            - HTTPRouter.RegisterRoute('/routed/object',rmall,TMyHandler);

          - Chamada do método TMyHandler.HandleRequest()
            - http://localhost:8080/routed/object/
    }
    public procedure HandleRequest(ARequest: TRequest; aResponse: TResponse);override;
  end;

{$I ../includes/rotas_h.inc}

implementation

uses webutil, fphttp;


Var
  C1,C2 : TComponent;

{$I ../includes/rotas.inc}

{ TMyHandler }

procedure TMyHandler.HandleRequest(ARequest: TRequest; AResponse: TResponse);
begin
  RequestToResponse('Route object',ARequest,AResponse);
end;

Procedure RegisterRoutes;

begin
  if (C1=Nil) then
  begin
    C1:=TComponent.Create(Nil);
    C1.Name:='ComponentRoute1';
    HTTPRouter.RegisterRoute('/component/1',C1,rmall,@ComponentPath);

    C2:=TComponent.Create(Nil);
    C2.Name:='ComponentRoute2';
    HTTPRouter.RegisterRoute('/component/2',C2,rmall,@ComponentPath);
  end;

  HTTPRouter.RegisterRoute('simple',rmall,@SimpleCallBack);
  HTTPRouter.RegisterRoute('onepath/:param',rmall,@ParamPath);
  HTTPRouter.RegisterRoute('twopaths/:param1/:param2',rmall,@ParamPaths2);
  HTTPRouter.RegisterRoute('onepath/*path/new',rmall,@ParamPathMiddle);

  // TMyHandler
  HTTPRouter.RegisterRoute('/routed/object',rmall,TMyHandler);


  {: A rota '*path' pegará todos os outros caminhos, ou seja: Se não
     informar uma rota o sistema não gera execeção.
     Exemplo:
       Ao digitar o endereço http://localhost:8080 seja executado
  }
  HTTPRouter.RegisterRoute('*path',rmall,@DefaultCallBack,True);

end;

begin
  FreeAndNil(C1);
  FreeAndNil(C2);
end.

